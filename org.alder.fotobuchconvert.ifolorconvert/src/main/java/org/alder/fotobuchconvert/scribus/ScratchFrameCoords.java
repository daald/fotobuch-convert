/*******************************************************************************
 * Copyright (c) 2012 Daniel Alder.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v3.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/gpl.html
 * 
 * Contributors:
 *     Daniel Alder - initial API and implementation
 ******************************************************************************/
package org.alder.fotobuchconvert.scribus;

public class ScratchFrameCoords {

	// public static void checkLimits() {
	// float limitLT = 20;
	// float limitBR = 270;
	//
	// float x1 = 99999, x2 = -1, x3 = 99999, x4 = -1;
	// float y1 = 99999, y2 = -1, y3 = 99999, y4 = -1;
	//
	// for (int i = 0; i < datacoords.length; i += 2) {
	// float x = datacoords[i];
	// float y = datacoords[i + 1];
	//
	// boolean left = x < limitLT;
	// boolean right = x > limitBR;
	// boolean top = y < limitLT;
	// boolean bottom = y > limitBR;
	//
	// if (left && x1 > x)
	// x1 = x;
	// if (right && x4 < x)
	// x4 = x;
	// if (top && y1 > y)
	// y1 = y;
	// if (bottom && y4 < y)
	// y4 = y;
	//
	// if ((left || right) && (top || bottom))
	// continue;
	//
	// if (left && x2 < x)
	// x2 = x;
	// if (right && x3 > x)
	// x3 = x;
	// if (top && y2 < y)
	// y2 = y;
	// if (bottom && y3 > y)
	// y3 = y;
	// }
	// System.out.printf("X: %f %f %f %f \n", x1, x2, x3, x4);
	// System.out.printf("Y: %f %f %f %f \n", y1, y2, y3, y4);
	//
	// System.out.printf("R: %f %f %f %f \n", x2 - x1, x4 - x3, y2 - y1, y4
	// - y3);
	//
	// System.out
	// .printf("private final static float datax1=%ff,datax2=%ff,datax3=%ff,datax4=%ff;\n",
	// x1, x2, x3, x4);
	// System.out
	// .printf("private final static float datay1=%ff,datay2=%ff,datay3=%ff,datay4=%ff;\n",
	// y1, y2, y3, y4);
	//
	// System.out.println();
	// }
	//
	// public static void main(String[] args) {
	// checkLimits();
	//
	// new ScratchFrameCoords().get(500, 500, 5, 15);
	// }

	public ScribusPolyBuilder get(double width, double height,
			double innerwidth, double outerwidth) {
		final double outx1 = 0 - outerwidth, outx2 = 0, outx3 = width, outx4 = width
				+ outerwidth;
		final double outy1 = 0 - outerwidth, outy2 = 0, outy3 = height, outy4 = height
				+ outerwidth;

		ScribusPolyBuilder pb = new ScribusPolyBuilder();

		for (int i = 0; i < datacoords.length; i += 4) {
			double[] pt = new double[4];
			for (int j = 0; j < 4; j += 2) {
				float x = datacoords[i + j];
				float y = datacoords[i + j + 1];

				double ox, oy;
				if (x <= datax2)
					ox = stretch(x, datax1, datax2, outx1, outx2);
				else if (x >= datax3)
					ox = stretch(x, datax3, datax4, outx3, outx4);
				else
					ox = stretch(x, datax2, datax3, outx2, outx3);

				if (y <= datay2)
					oy = stretch(y, datay1, datay2, outy1, outy2);
				else if (y >= datay3)
					oy = stretch(y, datay3, datay4, outy3, outy4);
				else
					oy = stretch(y, datay2, datay3, outy2, outy3);

				System.out.println(x + " " + y + "\t" + ox + " " + oy);
				pt[0 + j] = ox;
				pt[1 + j] = oy;
			}

			pb.add(pt[0], pt[1], pt[2], pt[3]);
		}

		return pb;
	}

	private double stretch(float value, float in1, float in2, double out1,
			double out2) {
		return (value - in1) / (in2 - in1) * (out2 - out1) + out1;
	}

	private final static float datax1 = 0.000000f, datax2 = 5.294580f,
			datax3 = 323.490997f, datax4 = 329.000000f;
	private final static float datay1 = 0.000000f, datay2 = 6.469950f,
			datay3 = 298.777008f, datay4 = 304.964996f;
	// private final static float dataFrameW = 13;
	private final static float[] datacoords = { 7.12958f, 1.48268f, 1.51321f,
			3.08956f, 3.13553f, 12.9041f, 3.76777f, 8.98184f, 3.13553f,
			12.9041f, 0.537668f, 16.9252f, 4.33266f, 26.0608f, 3.00344f,
			21.9918f, 4.33266f, 26.0608f, 4.78156f, 31.0911f, 3.09175f,
			40.9077f, 1.91055f, 35.85f, 3.09175f, 40.9077f, 2.38389f, 45.6124f,
			3.11811f, 54.7631f, 4.12349f, 50.1612f, 3.11811f, 54.7631f,
			1.42691f, 59.0164f, 2.41079f, 68.346f, 1.48153f, 63.9056f,
			2.41079f, 68.346f, 4.88105f, 73.0146f, 2.27121f, 82.4428f,
			2.54168f, 77.6568f, 2.27121f, 82.4428f, 1.2187f, 86.8216f,
			3.38285f, 95.1196f, 3.30994f, 90.7952f, 3.38285f, 95.1196f,
			4.70456f, 99.539f, 4.42582f, 108.754f, 4.82351f, 104.151f,
			4.42582f, 108.754f, 3.92917f, 113.332f, 4.64315f, 122.621f,
			4.46009f, 117.996f, 4.64315f, 122.621f, 4.75854f, 127.241f,
			4.59079f, 136.426f, 3.60885f, 131.848f, 4.59079f, 136.426f,
			5.29458f, 140.73f, 4.61686f, 149.667f, 3.89823f, 145.273f,
			4.61686f, 149.667f, 4.8966f, 154.547f, 3.16033f, 164.045f,
			1.97071f, 159.115f, 3.16033f, 164.045f, 2.46595f, 169.129f,
			2.76541f, 179.118f, 4.34999f, 174.228f, 2.76541f, 179.118f,
			1.22226f, 184.177f, 3.09167f, 194.676f, 1.47158f, 189.651f,
			3.09167f, 194.676f, 4.63707f, 199.053f, 1.95794f, 207.944f,
			1.76922f, 203.429f, 1.95794f, 207.944f, 2.05665f, 212.716f,
			4.2307f, 221.946f, 3.27419f, 217.303f, 4.2307f, 221.946f, 4.69199f,
			226.213f, 4.11516f, 234.724f, 4.69951f, 230.533f, 4.11516f,
			234.724f, 4.99924f, 238.623f, 4.52454f, 246.877f, 4.23122f,
			242.794f, 4.52454f, 246.877f, 4.44982f, 252.05f, 4.89554f,
			262.344f, 4.01298f, 257.235f, 4.89554f, 262.344f, 4.40074f,
			267.103f, 4.46469f, 276.412f, 4.37497f, 271.669f, 4.46469f,
			276.412f, 3.91157f, 280.55f, 2.21409f, 288.789f, 2.31363f,
			284.552f, 2.21409f, 288.789f, 3.42595f, 293.5f, 4.04117f, 302.608f,
			0f, 298.779f, 4.04117f, 302.608f, 8.03775f, 304.965f, 17.6968f,
			301.497f, 13.6733f, 303.431f, 17.6968f, 301.497f, 21.8039f,
			302.541f, 29.6589f, 302.838f, 25.448f, 302.903f, 29.6589f,
			302.838f, 32.861f, 302.484f, 38.588f, 300.063f, 35.4015f, 299.931f,
			38.588f, 300.063f, 40.3858f, 299.969f, 43.6066f, 300.997f,
			42.1383f, 299.816f, 43.6066f, 300.997f, 47.6556f, 300.698f,
			55.976f, 301.09f, 51.8962f, 300.694f, 55.976f, 301.09f, 58.8646f,
			301.684f, 64.4427f, 300.017f, 61.6808f, 299.752f, 64.4427f,
			300.017f, 68.1198f, 300.687f, 75.4786f, 301.616f, 71.6328f,
			302.893f, 75.4786f, 301.616f, 79.8265f, 300.309f, 87.7622f,
			301.076f, 83.433f, 302.723f, 87.7622f, 301.076f, 92.1272f,
			302.009f, 100.392f, 303.407f, 95.8163f, 303.369f, 100.392f,
			303.407f, 105.093f, 301.588f, 114.765f, 302.156f, 110.253f,
			299.517f, 114.765f, 302.156f, 118.733f, 301.825f, 126.98f,
			301.162f, 123.32f, 304.433f, 126.98f, 301.162f, 131.523f, 300.803f,
			140.522f, 302.496f, 136.056f, 301.942f, 140.522f, 302.496f,
			144.617f, 304.392f, 152.776f, 301.038f, 148.788f, 301.738f,
			152.776f, 301.038f, 156.924f, 301.64f, 164.971f, 301.929f,
			160.708f, 302.36f, 164.971f, 301.929f, 167.618f, 303.084f,
			172.893f, 300.179f, 170.344f, 300.907f, 172.893f, 300.179f,
			175.216f, 299.114f, 180.5f, 300.651f, 178.569f, 298.777f, 180.5f,
			300.651f, 184.821f, 299.995f, 193.979f, 300.753f, 189.473f,
			300.454f, 193.979f, 300.753f, 198.821f, 299.288f, 208.202f,
			301.43f, 203.454f, 299.793f, 208.202f, 301.43f, 212.398f, 301.011f,
			220.655f, 301.267f, 216.754f, 300.844f, 220.655f, 301.267f,
			225.041f, 298.901f, 233.158f, 302.51f, 228.915f, 303.043f,
			233.158f, 302.51f, 237.609f, 304.093f, 245.954f, 300.287f, 241.62f,
			301.009f, 245.954f, 300.287f, 249.811f, 301.64f, 257.71f, 302.487f,
			253.877f, 301.941f, 257.71f, 302.487f, 262.097f, 302.541f,
			270.623f, 301.344f, 265.95f, 299.166f, 270.623f, 301.344f,
			275.132f, 301.609f, 284.189f, 302.272f, 279.733f, 303.842f,
			284.189f, 302.272f, 288.422f, 300.436f, 297.394f, 302.181f,
			293.107f, 300.942f, 297.394f, 302.181f, 301.569f, 301.165f,
			309.741f, 301.084f, 305.692f, 303.9f, 309.741f, 301.084f, 313.695f,
			300.981f, 321.903f, 303.092f, 317.612f, 304.163f, 321.903f,
			303.092f, 327.26f, 301.105f, 325.507f, 290.749f, 324.671f,
			294.983f, 325.507f, 290.749f, 325.993f, 286.173f, 325.722f,
			276.905f, 326.153f, 281.474f, 325.722f, 276.905f, 323.207f,
			273.001f, 324.748f, 264.24f, 325.311f, 268.462f, 324.748f, 264.24f,
			324.64f, 259.788f, 324.791f, 250.879f, 325.911f, 255.335f,
			324.791f, 250.879f, 323.958f, 246.38f, 325.227f, 237.436f, 325.71f,
			241.965f, 325.227f, 237.436f, 326.11f, 233.062f, 324.952f,
			224.496f, 323.616f, 228.883f, 324.952f, 224.496f, 325.645f,
			220.09f, 327.534f, 211.453f, 326.389f, 215.534f, 327.534f,
			211.453f, 327.78f, 207.239f, 326.04f, 198.901f, 326.995f, 202.989f,
			326.04f, 198.901f, 325.519f, 194.583f, 327.663f, 186.118f,
			328.709f, 190.551f, 327.663f, 186.118f, 328.55f, 181.242f, 326.67f,
			172.224f, 324.47f, 176.972f, 326.67f, 172.224f, 325.734f, 167.962f,
			326.541f, 159.519f, 327.053f, 163.757f, 326.541f, 159.519f,
			325.999f, 154.559f, 324.925f, 144.471f, 323.491f, 149.552f,
			324.925f, 144.471f, 324.279f, 139.837f, 325.282f, 130.751f,
			325.756f, 135.379f, 325.282f, 130.751f, 324.013f, 125.379f,
			325.224f, 114.616f, 325.506f, 120.022f, 325.224f, 114.616f,
			326.258f, 110.542f, 324.854f, 102.45f, 324.15f, 106.58f, 324.854f,
			102.45f, 326.437f, 98.3181f, 327.615f, 89.6523f, 325.131f,
			93.4232f, 327.615f, 89.6523f, 327.802f, 85.0322f, 326.265f,
			75.831f, 327.473f, 80.293f, 326.265f, 75.831f, 325.652f, 71.2807f,
			327.777f, 62.5394f, 329f, 67.0705f, 327.777f, 62.5394f, 328.335f,
			57.3987f, 326.931f, 47.7333f, 324.872f, 52.8594f, 326.931f,
			47.7333f, 325.1f, 42.8993f, 326.057f, 33.0071f, 327.849f, 37.8756f,
			326.057f, 33.0071f, 324.398f, 28.0276f, 327.857f, 17.8791f,
			326.978f, 22.8104f, 327.857f, 17.8791f, 326.401f, 13.3623f,
			327.072f, 4.35673f, 328.891f, 8.76189f, 327.072f, 4.35673f,
			324.612f, 0f, 316.854f, 2.50652f, 320.582f, 2.6833f, 316.854f,
			2.50652f, 314.187f, 3.15226f, 308.791f, 3.42646f, 311.62f, 5.3311f,
			308.791f, 3.42646f, 304.515f, 3.02272f, 295.835f, 3.44618f,
			300.174f, 2.6592f, 295.835f, 3.44618f, 290.518f, 3.99955f,
			280.147f, 2.40659f, 285.436f, 0.672223f, 280.147f, 2.40659f,
			275.895f, 2.71897f, 267.352f, 3.40372f, 271.602f, 4.3894f,
			267.352f, 3.40372f, 262.819f, 0.394526f, 252.747f, 3.36285f,
			257.505f, 2.45539f, 252.747f, 3.36285f, 248.818f, 5.33036f,
			240.787f, 1.82819f, 244.778f, 2.25029f, 240.787f, 1.82819f,
			235.889f, 1.38756f, 226.664f, 3.66731f, 231.42f, 3.55916f,
			226.664f, 3.66731f, 222.22f, 2.5041f, 213.313f, 3.06431f, 217.8f,
			4.52705f, 213.313f, 3.06431f, 208.756f, 3.16694f, 199.828f,
			4.16005f, 204.37f, 6.0783f, 199.828f, 4.16005f, 195.157f, 3.84191f,
			185.741f, 4.05276f, 190.424f, 4.20995f, 185.741f, 4.05276f,
			180.955f, 5.5698f, 171.572f, 3.11265f, 176.166f, 4.75732f,
			171.572f, 3.11265f, 167.009f, 2.42865f, 158.007f, 3.34138f,
			162.543f, 3.01392f, 158.007f, 3.34138f, 153.468f, 4.02169f,
			144.865f, 2.09501f, 149.391f, 0.742852f, 144.865f, 2.09501f,
			140.297f, 2.84497f, 130.953f, 3.60274f, 135.625f, 3.88891f,
			130.953f, 3.60274f, 126.535f, 1.05334f, 116.884f, 3.00773f,
			121.572f, 2.03118f, 116.884f, 3.00773f, 112.349f, 5.8964f,
			103.102f, 1.99309f, 107.794f, 1.79429f, 103.102f, 1.99309f,
			98.8456f, 1.40132f, 91.0636f, 3.73893f, 95.0829f, 3.12807f,
			91.0636f, 3.73893f, 86.1595f, 2.65077f, 76.4939f, 3.07277f,
			81.4001f, 4.47822f, 76.4939f, 3.07277f, 71.5088f, 3.93469f,
			61.4874f, 3.88043f, 66.5046f, 5.82117f, 61.4874f, 3.88043f,
			56.5009f, 4.29802f, 46.6043f, 4.4295f, 51.6115f, 3.88009f,
			46.6043f, 4.4295f, 41.7451f, 6.46995f, 32.8117f, 2.9492f, 37.5527f,
			3.01566f, 32.8117f, 2.9492f, 28.2842f, 2.91536f, 19.5598f,
			4.22783f, 23.8306f, 2.456f, 19.5598f, 4.22783f, 15.5169f, 2.59086f,
			7.12958f, 1.48268f, 11.4808f, 2.15941f, 7.12958f, 1.48268f,
			7.12958f, 1.48268f, 7.12958f, 1.48268f, 7.12958f, 1.48268f };

	/**
	 * <pre>
	 * 20..270
	 * ,
	 * 			999999f, 999999f, 999999f, 999999f, 999999f, 999999f, 999999f,
	 * 			999999f, 314.978f, 15.4543f, 314.978f, 106.953f, 314.978f, 289.95f,
	 * 			314.978f, 198.451f, 314.978f, 289.95f, 214.909f, 289.95f, 14.7707f,
	 * 			289.95f, 114.84f, 289.95f, 14.7707f, 289.95f, 14.7707f, 198.451f,
	 * 			14.7707f, 15.4543f, 14.7707f, 106.953f, 14.7707f, 15.4543f,
	 * 			114.84f, 15.4543f, 314.978f, 15.4543f, 214.909f, 15.4543f,
	 * 			314.978f, 15.4543f, 314.978f, 15.4543f, 314.978f, 15.4543f,
	 * 314.978f, 15.4543f
	 */

}
